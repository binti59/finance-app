version: '3'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14
    container_name: finance_app_postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_INITDB_ARGS: "--data-checksums"
      POSTGRES_SHARED_BUFFERS: 2GB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 6GB
      POSTGRES_WORK_MEM: 20MB
      POSTGRES_MAINTENANCE_WORK_MEM: 512MB
      TZ: "UTC"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./database/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    ports:
      - "${DB_PORT}:5432"
    restart: always
    networks:
      - pfs-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: finance_app_backend
    environment:
      NODE_ENV: production
      PORT: ${BACKEND_PORT}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: 24h
      TZ: "UTC"
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    depends_on:
      - postgres
    restart: always
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./logs:/app/logs
    networks:
      - pfs-network

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: finance_app_frontend
    environment:
      NODE_ENV: production
      REACT_APP_API_URL: https://${DOMAIN_NAME}/api
      PORT: ${FRONTEND_PORT}
      TZ: "UTC"
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    depends_on:
      - backend
    restart: always
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - pfs-network

networks:
  pfs-network:
    driver: bridge

volumes:
  postgres_data:
